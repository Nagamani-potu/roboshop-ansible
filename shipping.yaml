- name: shipping
  hosts: shipping
  become: yes
  vars:
    mysql_host: mysql.devopstraining.space
    mysql_root_password: RoboShop@1

  tasks:
  - name: install maven
    ansible.builtin.dnf:
      name: maven
      state: present

  - name: create roboshop user
    ansible.builtin.user:
      name: roboshop

  - name: recursively remove app directory if exists
    ansible.builtin.file:
      path: /app
      state: absent

  - name: create app directory
    ansible.builtin.file:
      path: /app
      state: directory

  - name: download application
    ansible.builtin.get_url:
      url: https://roboshop-builds.s3.amazonaws.com/shipping.zip
      dest: /tmp/shipping.zip

  - name: extract shipping application
    ansible.builtin.unarchive:
      src: /tmp/shipping.zip
      dest: /app
      remote_src: yes

  - name: install dependencies
    ansible.builtin.command:
      cmd: mvn clean package
      chdir: /app

  - name: rename jar file
    ansible.builtin.command:
      cmd: mv target/shipping-1.0.jar shipping.jar
      chdir: /app

  - name: copy shipping service
    ansible.builtin.copy:
      src: shipping.service
      dest: /etc/systemd/system/shipping.service

  - name: daemon reload
    ansible.builtin.systemd:
      daemon_reload: yes

  - name: install mysql client
    ansible.builtin.dnf:
      name: mysql
      state: present

  - name: check if cities schema exists
    ansible.builtin.command: >
      mysql -h {{ mysql_host }} -uroot -p{{ mysql_root_password }} -sN -e
      "SELECT COUNT(*) FROM INFORMATION_SCHEMA.SCHEMATA WHERE SCHEMA_NAME = 'cities'"
    register: schema

  - name: print schema output
    ansible.builtin.debug:
      msg: "schema output: {{ schema.stdout }}"

  - name: Load schema.sql
    ansible.builtin.command: >
      mysql -h {{ mysql_host }} -uroot -p{{ mysql_root_password }} < /app/db/schema.sql
    when: schema.stdout != "1"

  - name: Load app-user.sql
    ansible.builtin.command: >
      mysql -h {{ mysql_host }} -uroot -p{{ mysql_root_password }} < /app/db/app-user.sql
    when: schema.stdout != "1"

  - name: Load master-data.sql
    ansible.builtin.command: >
      mysql -h {{ mysql_host }} -uroot -p{{ mysql_root_password }} < /app/db/master-data.sql
    when: schema.stdout != "1"

  - name: load cities data
    ansible.builtin.shell: >
      mysql -h {{ mysql_host }} -uroot -p{{ mysql_root_password }} < /app/db/shipping.sql
    when: schema.stdout != "1"

  - name: start and enable shipping
    ansible.builtin.service:
      name: shipping
      state: restarted
      enabled: yes
